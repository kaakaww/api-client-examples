/*
 * StackHawk Public API
 *  ![STACKHAWK](https://images.ctfassets.net/nx13ojx82pll/1zPawvEGOq9zKX8PuVw0kB/e4a31b30fdb07b7e424277d7824d2ffe/stackhawk-long.png) # StackHawk API  This is the OpenAPI specification for the [StackHawk](https://www.stackhawk.com) REST API, affectionately known as _Falcon_ ðŸ¦… #Kaakaww!  StackHawk is an application security testing tool built for developers. With powerful automation and integration capabilities, StackHawk gives engineers the ability to find and fix security vulnerabilities on every merge.  ## Getting Started  To make requests to the StackHawk API, you will first need an **API Key** from the StackHawk platform. That will be used to request an **access token**, which is used to authorize requests made to the StackHawk API.  Use of the StackHawk API will require a [StackHawk account](https://auth.stackhawk.com) and an organization with sufficient permissions.  From the StackHawk platform, under [Settings > API Keys](https://app.stackhawk.com/settings/apikeys) create a new API Key. These secrets are long-lived, so store this value in a secure fashion.  ### Authorization  Requests made to the StackHawk API server are authorized following the [OAuth2.0 protocol](https://oauth.net/2/)  To get an access token, make a request to `GET /api/v1/auth/login` and provide the user apikey through the `X-ApiKey` request header. This route will then return an access token that can authenticate further API requests. This token can then be used to authenticate subsequent requests, using the `authorization: Bearer` header.  For more information, see the **Api Authentication** section.  ### Rate Limiting  Api calls are ratelimited, with at most 180 requests per minute.  ## StackHawk Api Standards  ### Client Errors  API Calls that fail due to client input will return 4xx status code.  #### `401 Unauthorized` The server doesn't think you should be making this request.  This error is intentionally vague for security purposes, but any of the following could cause it:  - no authorization was provided - authorization has expired - authorization is insufficient for the requested resource  #### `404 Not Found`  The route or resource does not exist.  #### `400 Bad Request` The server could not process this request, although it may have tried. The JSON reponse body `message` will include details on what input was invalid.  ### Pagination and Sorting  Listing API routes will return resources in a paginated fashion. Paginated requests follow a pattern of taking the following optional path parameters:  * `pageToken`: a string incrementing count of pages in the pagination, starting from '0' * `pageSize`: the number of elements to request in the page, defaults to 10 * `sortField`: sorts the listed resource by an approved field, defaults to sorting by resource name * `sortDir`: either 'asc' or 'desc', defaults ascending  The responseBody of these API routes will additionally include two fields:  * `nextPageToken`: a string indicating the next `pageToken` to pass in for the next page of results with this request * `totalCount`: the total number of resources the query can paginate through  ## Questions? Comments? Concerns? Kaa-Kaww?  We are always making advancements and improvements to our Platform, Scanner and the StackHawk API. If you encounter an issue you cannot solve with this documentation, please reach out to [support@stackhawk.com](mailto:support@stackhawk.com) with your questions, and weâ€™ll help you troubleshoot any issues and get you soaring with StackHawk.   
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@stackhawk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationApplication;
import org.openapitools.client.model.ApplicationListApplicationsResponse;
import org.openapitools.client.model.ApplicationListEnvironmentsResponse;
import org.openapitools.client.model.ApplicationNewApplicationEnvRequest;
import org.openapitools.client.model.ApplicationNewApplicationRequest;
import org.openapitools.client.model.ApplicationUpdateApplicationEnvRequest;
import org.openapitools.client.model.ApplicationUpdateApplicationRequest;
import java.math.BigDecimal;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationsApi {
    private ApiClient localVarApiClient;

    public ApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createApplication
     * @param orgId UUID identifier for this StackHawk Organization (required)
     * @param applicationNewApplicationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApplicationCall(UUID orgId, ApplicationNewApplicationRequest applicationNewApplicationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = applicationNewApplicationRequest;

        // create path and map variables
        String localVarPath = "/api/v1/org/{orgId}/app"
            .replaceAll("\\{" + "orgId" + "\\}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApplicationValidateBeforeCall(UUID orgId, ApplicationNewApplicationRequest applicationNewApplicationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createApplication(Async)");
        }
        
        // verify the required parameter 'applicationNewApplicationRequest' is set
        if (applicationNewApplicationRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationNewApplicationRequest' when calling createApplication(Async)");
        }
        

        okhttp3.Call localVarCall = createApplicationCall(orgId, applicationNewApplicationRequest, _callback);
        return localVarCall;

    }

    /**
     * Create application
     * Creates a new application for this organization.
     * @param orgId UUID identifier for this StackHawk Organization (required)
     * @param applicationNewApplicationRequest  (required)
     * @return ApplicationApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationApplication createApplication(UUID orgId, ApplicationNewApplicationRequest applicationNewApplicationRequest) throws ApiException {
        ApiResponse<ApplicationApplication> localVarResp = createApplicationWithHttpInfo(orgId, applicationNewApplicationRequest);
        return localVarResp.getData();
    }

    /**
     * Create application
     * Creates a new application for this organization.
     * @param orgId UUID identifier for this StackHawk Organization (required)
     * @param applicationNewApplicationRequest  (required)
     * @return ApiResponse&lt;ApplicationApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationApplication> createApplicationWithHttpInfo(UUID orgId, ApplicationNewApplicationRequest applicationNewApplicationRequest) throws ApiException {
        okhttp3.Call localVarCall = createApplicationValidateBeforeCall(orgId, applicationNewApplicationRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create application (asynchronously)
     * Creates a new application for this organization.
     * @param orgId UUID identifier for this StackHawk Organization (required)
     * @param applicationNewApplicationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApplicationAsync(UUID orgId, ApplicationNewApplicationRequest applicationNewApplicationRequest, final ApiCallback<ApplicationApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApplicationValidateBeforeCall(orgId, applicationNewApplicationRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEnvironment
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param applicationNewApplicationEnvRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnvironmentCall(UUID appId, ApplicationNewApplicationEnvRequest applicationNewApplicationEnvRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = applicationNewApplicationEnvRequest;

        // create path and map variables
        String localVarPath = "/api/v1/app/{appId}/env"
            .replaceAll("\\{" + "appId" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEnvironmentValidateBeforeCall(UUID appId, ApplicationNewApplicationEnvRequest applicationNewApplicationEnvRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createEnvironment(Async)");
        }
        
        // verify the required parameter 'applicationNewApplicationEnvRequest' is set
        if (applicationNewApplicationEnvRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationNewApplicationEnvRequest' when calling createEnvironment(Async)");
        }
        

        okhttp3.Call localVarCall = createEnvironmentCall(appId, applicationNewApplicationEnvRequest, _callback);
        return localVarCall;

    }

    /**
     * Create environment
     * Creates a new environment under this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param applicationNewApplicationEnvRequest  (required)
     * @return ApplicationApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationApplication createEnvironment(UUID appId, ApplicationNewApplicationEnvRequest applicationNewApplicationEnvRequest) throws ApiException {
        ApiResponse<ApplicationApplication> localVarResp = createEnvironmentWithHttpInfo(appId, applicationNewApplicationEnvRequest);
        return localVarResp.getData();
    }

    /**
     * Create environment
     * Creates a new environment under this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param applicationNewApplicationEnvRequest  (required)
     * @return ApiResponse&lt;ApplicationApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationApplication> createEnvironmentWithHttpInfo(UUID appId, ApplicationNewApplicationEnvRequest applicationNewApplicationEnvRequest) throws ApiException {
        okhttp3.Call localVarCall = createEnvironmentValidateBeforeCall(appId, applicationNewApplicationEnvRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create environment (asynchronously)
     * Creates a new environment under this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param applicationNewApplicationEnvRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnvironmentAsync(UUID appId, ApplicationNewApplicationEnvRequest applicationNewApplicationEnvRequest, final ApiCallback<ApplicationApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEnvironmentValidateBeforeCall(appId, applicationNewApplicationEnvRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApplication
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApplicationCall(UUID appId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{appId}"
            .replaceAll("\\{" + "appId" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApplicationValidateBeforeCall(UUID appId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteApplication(Async)");
        }
        

        okhttp3.Call localVarCall = deleteApplicationCall(appId, _callback);
        return localVarCall;

    }

    /**
     * Delete application
     * Deletes this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApplication(UUID appId) throws ApiException {
        deleteApplicationWithHttpInfo(appId);
    }

    /**
     * Delete application
     * Deletes this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApplicationWithHttpInfo(UUID appId) throws ApiException {
        okhttp3.Call localVarCall = deleteApplicationValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete application (asynchronously)
     * Deletes this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApplicationAsync(UUID appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApplicationValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEnvironment
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envId UUID identifier for this StackHawk Environment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnvironmentCall(UUID appId, UUID envId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{appId}/env/{envId}"
            .replaceAll("\\{" + "appId" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "envId" + "\\}", localVarApiClient.escapeString(envId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEnvironmentValidateBeforeCall(UUID appId, UUID envId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteEnvironment(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling deleteEnvironment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEnvironmentCall(appId, envId, _callback);
        return localVarCall;

    }

    /**
     * Delete environment
     * Deletes this environment.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envId UUID identifier for this StackHawk Environment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEnvironment(UUID appId, UUID envId) throws ApiException {
        deleteEnvironmentWithHttpInfo(appId, envId);
    }

    /**
     * Delete environment
     * Deletes this environment.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envId UUID identifier for this StackHawk Environment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEnvironmentWithHttpInfo(UUID appId, UUID envId) throws ApiException {
        okhttp3.Call localVarCall = deleteEnvironmentValidateBeforeCall(appId, envId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete environment (asynchronously)
     * Deletes this environment.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envId UUID identifier for this StackHawk Environment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnvironmentAsync(UUID appId, UUID envId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEnvironmentValidateBeforeCall(appId, envId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApplication
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationCall(UUID appId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{appId}"
            .replaceAll("\\{" + "appId" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationValidateBeforeCall(UUID appId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getApplication(Async)");
        }
        

        okhttp3.Call localVarCall = getApplicationCall(appId, _callback);
        return localVarCall;

    }

    /**
     * Get application
     * Gets this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @return ApplicationApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationApplication getApplication(UUID appId) throws ApiException {
        ApiResponse<ApplicationApplication> localVarResp = getApplicationWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * Get application
     * Gets this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @return ApiResponse&lt;ApplicationApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationApplication> getApplicationWithHttpInfo(UUID appId) throws ApiException {
        okhttp3.Call localVarCall = getApplicationValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<ApplicationApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get application (asynchronously)
     * Gets this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationAsync(UUID appId, final ApiCallback<ApplicationApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<ApplicationApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listApplications
     * @param orgId UUID identifier for this StackHawk Organization (required)
     * @param appIds A comma-deliminated list of UUID identifiers of StackHawk Applications. (optional)
     * @param envs Names of environments to filter results by (optional)
     * @param ignoreEnvs If enabled returns a shortened list of applications, omiting environment entries (optional, default to false)
     * @param pageSize Pagination response size limit (optional, default to 10)
     * @param pageToken Pagination request page increment (optional, default to )
     * @param sortField Resource field to sort paginated response by (optional, default to name)
     * @param sortDir Paginated results are sorted &#39;asc&#39; or &#39;desc&#39; (optional, default to asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response of applications. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listApplicationsCall(String orgId, List<String> appIds, List<String> envs, Boolean ignoreEnvs, BigDecimal pageSize, String pageToken, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{orgId}/list"
            .replaceAll("\\{" + "orgId" + "\\}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "appIds", appIds));
        }

        if (envs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "envs", envs));
        }

        if (ignoreEnvs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreEnvs", ignoreEnvs));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDir", sortDir));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listApplicationsValidateBeforeCall(String orgId, List<String> appIds, List<String> envs, Boolean ignoreEnvs, BigDecimal pageSize, String pageToken, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listApplications(Async)");
        }
        

        okhttp3.Call localVarCall = listApplicationsCall(orgId, appIds, envs, ignoreEnvs, pageSize, pageToken, sortField, sortDir, _callback);
        return localVarCall;

    }

    /**
     * List applications
     * Lists applications that belong to this organization.
     * @param orgId UUID identifier for this StackHawk Organization (required)
     * @param appIds A comma-deliminated list of UUID identifiers of StackHawk Applications. (optional)
     * @param envs Names of environments to filter results by (optional)
     * @param ignoreEnvs If enabled returns a shortened list of applications, omiting environment entries (optional, default to false)
     * @param pageSize Pagination response size limit (optional, default to 10)
     * @param pageToken Pagination request page increment (optional, default to )
     * @param sortField Resource field to sort paginated response by (optional, default to name)
     * @param sortDir Paginated results are sorted &#39;asc&#39; or &#39;desc&#39; (optional, default to asc)
     * @return ApplicationListApplicationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response of applications. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationListApplicationsResponse listApplications(String orgId, List<String> appIds, List<String> envs, Boolean ignoreEnvs, BigDecimal pageSize, String pageToken, String sortField, String sortDir) throws ApiException {
        ApiResponse<ApplicationListApplicationsResponse> localVarResp = listApplicationsWithHttpInfo(orgId, appIds, envs, ignoreEnvs, pageSize, pageToken, sortField, sortDir);
        return localVarResp.getData();
    }

    /**
     * List applications
     * Lists applications that belong to this organization.
     * @param orgId UUID identifier for this StackHawk Organization (required)
     * @param appIds A comma-deliminated list of UUID identifiers of StackHawk Applications. (optional)
     * @param envs Names of environments to filter results by (optional)
     * @param ignoreEnvs If enabled returns a shortened list of applications, omiting environment entries (optional, default to false)
     * @param pageSize Pagination response size limit (optional, default to 10)
     * @param pageToken Pagination request page increment (optional, default to )
     * @param sortField Resource field to sort paginated response by (optional, default to name)
     * @param sortDir Paginated results are sorted &#39;asc&#39; or &#39;desc&#39; (optional, default to asc)
     * @return ApiResponse&lt;ApplicationListApplicationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response of applications. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationListApplicationsResponse> listApplicationsWithHttpInfo(String orgId, List<String> appIds, List<String> envs, Boolean ignoreEnvs, BigDecimal pageSize, String pageToken, String sortField, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = listApplicationsValidateBeforeCall(orgId, appIds, envs, ignoreEnvs, pageSize, pageToken, sortField, sortDir, null);
        Type localVarReturnType = new TypeToken<ApplicationListApplicationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List applications (asynchronously)
     * Lists applications that belong to this organization.
     * @param orgId UUID identifier for this StackHawk Organization (required)
     * @param appIds A comma-deliminated list of UUID identifiers of StackHawk Applications. (optional)
     * @param envs Names of environments to filter results by (optional)
     * @param ignoreEnvs If enabled returns a shortened list of applications, omiting environment entries (optional, default to false)
     * @param pageSize Pagination response size limit (optional, default to 10)
     * @param pageToken Pagination request page increment (optional, default to )
     * @param sortField Resource field to sort paginated response by (optional, default to name)
     * @param sortDir Paginated results are sorted &#39;asc&#39; or &#39;desc&#39; (optional, default to asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response of applications. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listApplicationsAsync(String orgId, List<String> appIds, List<String> envs, Boolean ignoreEnvs, BigDecimal pageSize, String pageToken, String sortField, String sortDir, final ApiCallback<ApplicationListApplicationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listApplicationsValidateBeforeCall(orgId, appIds, envs, ignoreEnvs, pageSize, pageToken, sortField, sortDir, _callback);
        Type localVarReturnType = new TypeToken<ApplicationListApplicationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEnvironments
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envs Names of environments to filter results by (optional)
     * @param pageSize Pagination response size limit (optional, default to 10)
     * @param pageToken Pagination request page increment (optional, default to )
     * @param sortField Resource field to sort paginated response by (optional, default to name)
     * @param sortDir Paginated results are sorted &#39;asc&#39; or &#39;desc&#39; (optional, default to asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response of environments. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEnvironmentsCall(UUID appId, List<String> envs, BigDecimal pageSize, String pageToken, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{appId}/env/list"
            .replaceAll("\\{" + "appId" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (envs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "envs", envs));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDir", sortDir));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEnvironmentsValidateBeforeCall(UUID appId, List<String> envs, BigDecimal pageSize, String pageToken, String sortField, String sortDir, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listEnvironments(Async)");
        }
        

        okhttp3.Call localVarCall = listEnvironmentsCall(appId, envs, pageSize, pageToken, sortField, sortDir, _callback);
        return localVarCall;

    }

    /**
     * List environments
     * List environments that belong to this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envs Names of environments to filter results by (optional)
     * @param pageSize Pagination response size limit (optional, default to 10)
     * @param pageToken Pagination request page increment (optional, default to )
     * @param sortField Resource field to sort paginated response by (optional, default to name)
     * @param sortDir Paginated results are sorted &#39;asc&#39; or &#39;desc&#39; (optional, default to asc)
     * @return ApplicationListEnvironmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response of environments. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationListEnvironmentsResponse listEnvironments(UUID appId, List<String> envs, BigDecimal pageSize, String pageToken, String sortField, String sortDir) throws ApiException {
        ApiResponse<ApplicationListEnvironmentsResponse> localVarResp = listEnvironmentsWithHttpInfo(appId, envs, pageSize, pageToken, sortField, sortDir);
        return localVarResp.getData();
    }

    /**
     * List environments
     * List environments that belong to this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envs Names of environments to filter results by (optional)
     * @param pageSize Pagination response size limit (optional, default to 10)
     * @param pageToken Pagination request page increment (optional, default to )
     * @param sortField Resource field to sort paginated response by (optional, default to name)
     * @param sortDir Paginated results are sorted &#39;asc&#39; or &#39;desc&#39; (optional, default to asc)
     * @return ApiResponse&lt;ApplicationListEnvironmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response of environments. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationListEnvironmentsResponse> listEnvironmentsWithHttpInfo(UUID appId, List<String> envs, BigDecimal pageSize, String pageToken, String sortField, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = listEnvironmentsValidateBeforeCall(appId, envs, pageSize, pageToken, sortField, sortDir, null);
        Type localVarReturnType = new TypeToken<ApplicationListEnvironmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List environments (asynchronously)
     * List environments that belong to this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envs Names of environments to filter results by (optional)
     * @param pageSize Pagination response size limit (optional, default to 10)
     * @param pageToken Pagination request page increment (optional, default to )
     * @param sortField Resource field to sort paginated response by (optional, default to name)
     * @param sortDir Paginated results are sorted &#39;asc&#39; or &#39;desc&#39; (optional, default to asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response of environments. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEnvironmentsAsync(UUID appId, List<String> envs, BigDecimal pageSize, String pageToken, String sortField, String sortDir, final ApiCallback<ApplicationListEnvironmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEnvironmentsValidateBeforeCall(appId, envs, pageSize, pageToken, sortField, sortDir, _callback);
        Type localVarReturnType = new TypeToken<ApplicationListEnvironmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApplication
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param applicationUpdateApplicationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApplicationCall(UUID appId, ApplicationUpdateApplicationRequest applicationUpdateApplicationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = applicationUpdateApplicationRequest;

        // create path and map variables
        String localVarPath = "/api/v1/app/{appId}"
            .replaceAll("\\{" + "appId" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApplicationValidateBeforeCall(UUID appId, ApplicationUpdateApplicationRequest applicationUpdateApplicationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateApplication(Async)");
        }
        
        // verify the required parameter 'applicationUpdateApplicationRequest' is set
        if (applicationUpdateApplicationRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationUpdateApplicationRequest' when calling updateApplication(Async)");
        }
        

        okhttp3.Call localVarCall = updateApplicationCall(appId, applicationUpdateApplicationRequest, _callback);
        return localVarCall;

    }

    /**
     * Update application
     * Updates this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param applicationUpdateApplicationRequest  (required)
     * @return ApplicationApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationApplication updateApplication(UUID appId, ApplicationUpdateApplicationRequest applicationUpdateApplicationRequest) throws ApiException {
        ApiResponse<ApplicationApplication> localVarResp = updateApplicationWithHttpInfo(appId, applicationUpdateApplicationRequest);
        return localVarResp.getData();
    }

    /**
     * Update application
     * Updates this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param applicationUpdateApplicationRequest  (required)
     * @return ApiResponse&lt;ApplicationApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationApplication> updateApplicationWithHttpInfo(UUID appId, ApplicationUpdateApplicationRequest applicationUpdateApplicationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateApplicationValidateBeforeCall(appId, applicationUpdateApplicationRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update application (asynchronously)
     * Updates this application.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param applicationUpdateApplicationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApplicationAsync(UUID appId, ApplicationUpdateApplicationRequest applicationUpdateApplicationRequest, final ApiCallback<ApplicationApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApplicationValidateBeforeCall(appId, applicationUpdateApplicationRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEnvironment
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envId UUID identifier for this StackHawk Environment (required)
     * @param applicationUpdateApplicationEnvRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnvironmentCall(UUID appId, UUID envId, ApplicationUpdateApplicationEnvRequest applicationUpdateApplicationEnvRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = applicationUpdateApplicationEnvRequest;

        // create path and map variables
        String localVarPath = "/api/v1/app/{appId}/env/{envId}"
            .replaceAll("\\{" + "appId" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "envId" + "\\}", localVarApiClient.escapeString(envId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEnvironmentValidateBeforeCall(UUID appId, UUID envId, ApplicationUpdateApplicationEnvRequest applicationUpdateApplicationEnvRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateEnvironment(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling updateEnvironment(Async)");
        }
        
        // verify the required parameter 'applicationUpdateApplicationEnvRequest' is set
        if (applicationUpdateApplicationEnvRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationUpdateApplicationEnvRequest' when calling updateEnvironment(Async)");
        }
        

        okhttp3.Call localVarCall = updateEnvironmentCall(appId, envId, applicationUpdateApplicationEnvRequest, _callback);
        return localVarCall;

    }

    /**
     * Update environment
     * Updates this environment.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envId UUID identifier for this StackHawk Environment (required)
     * @param applicationUpdateApplicationEnvRequest  (required)
     * @return ApplicationApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationApplication updateEnvironment(UUID appId, UUID envId, ApplicationUpdateApplicationEnvRequest applicationUpdateApplicationEnvRequest) throws ApiException {
        ApiResponse<ApplicationApplication> localVarResp = updateEnvironmentWithHttpInfo(appId, envId, applicationUpdateApplicationEnvRequest);
        return localVarResp.getData();
    }

    /**
     * Update environment
     * Updates this environment.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envId UUID identifier for this StackHawk Environment (required)
     * @param applicationUpdateApplicationEnvRequest  (required)
     * @return ApiResponse&lt;ApplicationApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationApplication> updateEnvironmentWithHttpInfo(UUID appId, UUID envId, ApplicationUpdateApplicationEnvRequest applicationUpdateApplicationEnvRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEnvironmentValidateBeforeCall(appId, envId, applicationUpdateApplicationEnvRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update environment (asynchronously)
     * Updates this environment.
     * @param appId UUID identifier for this StackHawk Application (required)
     * @param envId UUID identifier for this StackHawk Environment (required)
     * @param applicationUpdateApplicationEnvRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StackHawk Applications will namespace scanResults from HawkScan, and can manage scan settings that can be configured to influence HawkScan behavior. For more information, see [Applications](https://docs.stackhawk.com/web-app/applications.html). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnvironmentAsync(UUID appId, UUID envId, ApplicationUpdateApplicationEnvRequest applicationUpdateApplicationEnvRequest, final ApiCallback<ApplicationApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEnvironmentValidateBeforeCall(appId, envId, applicationUpdateApplicationEnvRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
