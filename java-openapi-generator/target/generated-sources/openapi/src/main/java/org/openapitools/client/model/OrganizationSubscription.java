/*
 * StackHawk Public API
 *  ![STACKHAWK](https://images.ctfassets.net/nx13ojx82pll/1zPawvEGOq9zKX8PuVw0kB/e4a31b30fdb07b7e424277d7824d2ffe/stackhawk-long.png) # StackHawk API  This is the OpenAPI specification for the [StackHawk](https://www.stackhawk.com) REST API, affectionately known as _Falcon_ ðŸ¦… #Kaakaww!  StackHawk is an application security testing tool built for developers. With powerful automation and integration capabilities, StackHawk gives engineers the ability to find and fix security vulnerabilities on every merge.  ## Getting Started  To make requests to the StackHawk API, you will first need an **API Key** from the StackHawk platform. That will be used to request an **access token**, which is used to authorize requests made to the StackHawk API.  Use of the StackHawk API will require a [StackHawk account](https://auth.stackhawk.com) and an organization with sufficient permissions.  From the StackHawk platform, under [Settings > API Keys](https://app.stackhawk.com/settings/apikeys) create a new API Key. These secrets are long-lived, so store this value in a secure fashion.  ### Authorization  Requests made to the StackHawk API server are authorized following the [OAuth2.0 protocol](https://oauth.net/2/)  To get an access token, make a request to `GET /api/v1/auth/login` and provide the user apikey through the `X-ApiKey` request header. This route will then return an access token that can authenticate further API requests. This token can then be used to authenticate subsequent requests, using the `authorization: Bearer` header.  For more information, see the **Api Authentication** section.  ### Rate Limiting  Api calls are ratelimited, with at most 180 requests per minute.  ## StackHawk Api Standards  ### Client Errors  API Calls that fail due to client input will return 4xx status code.  #### `401 Unauthorized` The server doesn't think you should be making this request.  This error is intentionally vague for security purposes, but any of the following could cause it:  - no authorization was provided - authorization has expired - authorization is insufficient for the requested resource  #### `404 Not Found`  The route or resource does not exist.  #### `400 Bad Request` The server could not process this request, although it may have tried. The JSON reponse body `message` will include details on what input was invalid.  ### Pagination and Sorting  Listing API routes will return resources in a paginated fashion. Paginated requests follow a pattern of taking the following optional path parameters:  * `pageToken`: a string incrementing count of pages in the pagination, starting from '0' * `pageSize`: the number of elements to request in the page, defaults to 10 * `sortField`: sorts the listed resource by an approved field, defaults to sorting by resource name * `sortDir`: either 'asc' or 'desc', defaults ascending  The responseBody of these API routes will additionally include two fields:  * `nextPageToken`: a string indicating the next `pageToken` to pass in for the next page of results with this request * `totalCount`: the total number of resources the query can paginate through  ## Questions? Comments? Concerns? Kaa-Kaww?  We are always making advancements and improvements to our Platform, Scanner and the StackHawk API. If you encounter an issue you cannot solve with this documentation, please reach out to [support@stackhawk.com](mailto:support@stackhawk.com) with your questions, and weâ€™ll help you troubleshoot any issues and get you soaring with StackHawk.   
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@stackhawk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Properties of the external billing subscription for entitled access to the StackHawk platform
 */
@ApiModel(description = "Properties of the external billing subscription for entitled access to the StackHawk platform")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-04T12:28:48.411362-06:00[America/Denver]")
public class OrganizationSubscription {
  public static final String SERIALIZED_NAME_APP_COUNT = "appCount";
  @SerializedName(SERIALIZED_NAME_APP_COUNT)
  private Long appCount;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private Long endDate;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "productName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Long quantity;

  /**
   * The billing recurring interval for this subscription
   */
  @JsonAdapter(RecurringIntervalEnum.Adapter.class)
  public enum RecurringIntervalEnum {
    RECURRING_INTERVAL_UNKNOWN("RECURRING_INTERVAL_UNKNOWN"),
    
    MONTH("MONTH"),
    
    YEAR("YEAR");

    private String value;

    RecurringIntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecurringIntervalEnum fromValue(String value) {
      for (RecurringIntervalEnum b : RecurringIntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecurringIntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecurringIntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecurringIntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecurringIntervalEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RECURRING_INTERVAL = "recurringInterval";
  @SerializedName(SERIALIZED_NAME_RECURRING_INTERVAL)
  private RecurringIntervalEnum recurringInterval;

  public static final String SERIALIZED_NAME_RECURRING_INTERVAL_COUNT = "recurringIntervalCount";
  @SerializedName(SERIALIZED_NAME_RECURRING_INTERVAL_COUNT)
  private Long recurringIntervalCount;

  public static final String SERIALIZED_NAME_STACKHAWK_ORG_ID = "stackhawkOrgId";
  @SerializedName(SERIALIZED_NAME_STACKHAWK_ORG_ID)
  private String stackhawkOrgId;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Long startDate;

  /**
   * The status of the organization subscription
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUBSCRIPTION_UNKNOWN("SUBSCRIPTION_UNKNOWN"),
    
    TRIALING("TRIALING"),
    
    ACTIVE("ACTIVE"),
    
    INCOMPLETE("INCOMPLETE"),
    
    CANCELLED("CANCELLED"),
    
    FREE("FREE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_UNIT_AMOUNT = "unitAmount";
  @SerializedName(SERIALIZED_NAME_UNIT_AMOUNT)
  private Long unitAmount;

  public static final String SERIALIZED_NAME_USER_COUNT = "userCount";
  @SerializedName(SERIALIZED_NAME_USER_COUNT)
  private Long userCount;


  public OrganizationSubscription appCount(Long appCount) {
    
    this.appCount = appCount;
    return this;
  }

   /**
   * Soft application limit for this organization
   * @return appCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Soft application limit for this organization")

  public Long getAppCount() {
    return appCount;
  }


  public void setAppCount(Long appCount) {
    this.appCount = appCount;
  }


  public OrganizationSubscription customerId(String customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * CustomerId from billing provider
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "CustomerId from billing provider")

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public OrganizationSubscription endDate(Long endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End Date of this subscription, in seconds from epoch
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "End Date of this subscription, in seconds from epoch")

  public Long getEndDate() {
    return endDate;
  }


  public void setEndDate(Long endDate) {
    this.endDate = endDate;
  }


  public OrganizationSubscription isEnabled(Boolean isEnabled) {
    
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * If external billing is enabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If external billing is enabled")

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public OrganizationSubscription productName(String productName) {
    
    this.productName = productName;
    return this;
  }

   /**
   * The name of the purchased product subscription
   * @return productName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the purchased product subscription")

  public String getProductName() {
    return productName;
  }


  public void setProductName(String productName) {
    this.productName = productName;
  }


  public OrganizationSubscription quantity(Long quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of units in this subscription
   * @return quantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The quantity of units in this subscription")

  public Long getQuantity() {
    return quantity;
  }


  public void setQuantity(Long quantity) {
    this.quantity = quantity;
  }


  public OrganizationSubscription recurringInterval(RecurringIntervalEnum recurringInterval) {
    
    this.recurringInterval = recurringInterval;
    return this;
  }

   /**
   * The billing recurring interval for this subscription
   * @return recurringInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The billing recurring interval for this subscription")

  public RecurringIntervalEnum getRecurringInterval() {
    return recurringInterval;
  }


  public void setRecurringInterval(RecurringIntervalEnum recurringInterval) {
    this.recurringInterval = recurringInterval;
  }


  public OrganizationSubscription recurringIntervalCount(Long recurringIntervalCount) {
    
    this.recurringIntervalCount = recurringIntervalCount;
    return this;
  }

   /**
   * How often in the recurring interval billing occurs
   * @return recurringIntervalCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How often in the recurring interval billing occurs")

  public Long getRecurringIntervalCount() {
    return recurringIntervalCount;
  }


  public void setRecurringIntervalCount(Long recurringIntervalCount) {
    this.recurringIntervalCount = recurringIntervalCount;
  }


  public OrganizationSubscription stackhawkOrgId(String stackhawkOrgId) {
    
    this.stackhawkOrgId = stackhawkOrgId;
    return this;
  }

   /**
   * The organization UUID for this subscription
   * @return stackhawkOrgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The organization UUID for this subscription")

  public String getStackhawkOrgId() {
    return stackhawkOrgId;
  }


  public void setStackhawkOrgId(String stackhawkOrgId) {
    this.stackhawkOrgId = stackhawkOrgId;
  }


  public OrganizationSubscription startDate(Long startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start Date of this subscription, in seconds from epoch
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Start Date of this subscription, in seconds from epoch")

  public Long getStartDate() {
    return startDate;
  }


  public void setStartDate(Long startDate) {
    this.startDate = startDate;
  }


  public OrganizationSubscription status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the organization subscription
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of the organization subscription")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public OrganizationSubscription subscriptionId(String subscriptionId) {
    
    this.subscriptionId = subscriptionId;
    return this;
  }

   /**
   * SubscriptionId from billing provider
   * @return subscriptionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SubscriptionId from billing provider")

  public String getSubscriptionId() {
    return subscriptionId;
  }


  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public OrganizationSubscription unitAmount(Long unitAmount) {
    
    this.unitAmount = unitAmount;
    return this;
  }

   /**
   * The number of units with this subscription
   * @return unitAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of units with this subscription")

  public Long getUnitAmount() {
    return unitAmount;
  }


  public void setUnitAmount(Long unitAmount) {
    this.unitAmount = unitAmount;
  }


  public OrganizationSubscription userCount(Long userCount) {
    
    this.userCount = userCount;
    return this;
  }

   /**
   * Soft user limit for this organization
   * @return userCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Soft user limit for this organization")

  public Long getUserCount() {
    return userCount;
  }


  public void setUserCount(Long userCount) {
    this.userCount = userCount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationSubscription organizationSubscription = (OrganizationSubscription) o;
    return Objects.equals(this.appCount, organizationSubscription.appCount) &&
        Objects.equals(this.customerId, organizationSubscription.customerId) &&
        Objects.equals(this.endDate, organizationSubscription.endDate) &&
        Objects.equals(this.isEnabled, organizationSubscription.isEnabled) &&
        Objects.equals(this.productName, organizationSubscription.productName) &&
        Objects.equals(this.quantity, organizationSubscription.quantity) &&
        Objects.equals(this.recurringInterval, organizationSubscription.recurringInterval) &&
        Objects.equals(this.recurringIntervalCount, organizationSubscription.recurringIntervalCount) &&
        Objects.equals(this.stackhawkOrgId, organizationSubscription.stackhawkOrgId) &&
        Objects.equals(this.startDate, organizationSubscription.startDate) &&
        Objects.equals(this.status, organizationSubscription.status) &&
        Objects.equals(this.subscriptionId, organizationSubscription.subscriptionId) &&
        Objects.equals(this.unitAmount, organizationSubscription.unitAmount) &&
        Objects.equals(this.userCount, organizationSubscription.userCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appCount, customerId, endDate, isEnabled, productName, quantity, recurringInterval, recurringIntervalCount, stackhawkOrgId, startDate, status, subscriptionId, unitAmount, userCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationSubscription {\n");
    sb.append("    appCount: ").append(toIndentedString(appCount)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    recurringInterval: ").append(toIndentedString(recurringInterval)).append("\n");
    sb.append("    recurringIntervalCount: ").append(toIndentedString(recurringIntervalCount)).append("\n");
    sb.append("    stackhawkOrgId: ").append(toIndentedString(stackhawkOrgId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    unitAmount: ").append(toIndentedString(unitAmount)).append("\n");
    sb.append("    userCount: ").append(toIndentedString(userCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

